{"version":3,"sources":["ToDoLists.jsx","Inc&Dec.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoLists","props","className","Tooltip","title","aria-hidden","onClick","set","id","text","Inc_Dec","useState","count","setCount","Button","alert","App","inputList","setInputList","items","setItems","deleteItems","console","log","oldItems","filter","arrElement","index","type","placeholder","value","onChange","event","target","map","itemValue","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qQAsBeA,EAnBG,SAACC,GAIf,OACA,oCACA,yBAAKC,UAAY,cACjB,kBAACC,EAAA,EAAD,CAASC,MAAM,UACf,uBAAGF,UAAU,gBAAgBG,cAAY,OAAQC,QAAW,WACxDL,EAAMM,IAAIN,EAAMO,QAIpB,gCAAMP,EAAMQ,KAAZ,Q,0CC0BWC,EAnCC,WAAO,IAAD,EAEQC,mBAAS,GAFjB,mBAEXC,EAFW,KAEJC,EAFI,KAmBlB,OACI,oCACA,yBAAKX,UAAY,QACjB,gCAAMU,EAAN,KACA,kBAACT,EAAA,EAAD,CAASC,MAAM,aACf,kBAACU,EAAA,EAAD,CAAQR,QApBA,WACRO,EAASD,EAAQ,IAmBOV,UAAY,OAApC,IAA4C,kBAAC,IAAD,MAA5C,MAEA,kBAACC,EAAA,EAAD,CAASC,MAAM,aACf,kBAACU,EAAA,EAAD,CAAQR,QAnBA,WACJM,EAAQ,EACRC,EAASD,EAAQ,GAGjBG,MAAM,oBAceb,UAAY,MAAMM,GAAK,QAAhD,IAAwD,kBAAC,IAAD,MAAxD,SCyCOQ,MApEf,WAAe,MAGqBL,mBAAS,IAH9B,mBAGNM,EAHM,KAGKC,EAHL,OAKaP,mBAAS,IALtB,mBAKNQ,EALM,KAKCC,EALD,KAqBLC,EAAc,SAACb,GACnBc,QAAQC,IAAI,OACZH,GAAS,SAACI,GACR,OAAOA,EAASC,QAAO,SAACC,EAAYC,GAClC,OAAOA,IAAUnB,SAOzB,OACC,oCAEA,yBAAKN,UAAU,OAEd,yCACA,6BACA,2BAAO0B,KAAK,OAAOC,YAAa,cAAcC,MAASb,EAAWc,SAhClD,SAACC,GACjBd,EAAac,EAAMC,OAAOH,UAgC1B,kBAAC3B,EAAA,EAAD,CAASC,MAAM,OACf,4BAAQE,QA9BU,WAClBc,GAAS,SAACI,GAGR,OADAF,QAAQC,IAAIC,GACN,GAAN,mBAAWA,GAAX,CAAqBP,OAEvBC,EAAa,MAwBb,QAEA,4BAIAC,EAAMe,KAAI,SAACC,EAAWR,GAErB,OAAO,kBAAC,EAAD,CAAUS,IAAOT,EACxBnB,GAAMmB,EACNlB,KAAQ0B,EACR5B,IAAOc,SAUT,kBAAC,EAAD,QCzDiBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.6f45cf85.chunk.js","sourcesContent":["import React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst ToDoLists = (props) => {\r\n\r\n   \r\n\r\n    return (\r\n    <> \r\n    <div className = \"todo_style\">\r\n    <Tooltip title='delete'>\r\n    <i className=\"fa fa-trash-o\" aria-hidden=\"true\"  onClick = {() => {\r\n        props.set(props.id)\r\n    }} >\r\n    </i>\r\n    </Tooltip>\r\n    <li> {props.text} </li>\r\n    </div>\r\n    </>\r\n    );\r\n\r\n}\r\nexport default ToDoLists;","import React, { useState } from 'react'\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nconst Inc_Dec = () => {\r\n\r\n    const [count, setCount] = useState(0)\r\n\r\n    const Inc = () =>{\r\n        setCount(count + 1)\r\n    }\r\n\r\n    const Dec = () => {\r\n        if (count > 0){\r\n            setCount(count - 1)\r\n        }\r\n        else {\r\n            alert(\"Last limit is 0\")\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    return(\r\n        <> \r\n        <div className = \"App2\">\r\n        <h1> {count} </h1>\r\n        <Tooltip title=\"Increment\">\r\n        <Button onClick = {Inc} className = \"btn\" > <AddCircleOutlineIcon /> </Button>\r\n        </Tooltip>\r\n        <Tooltip title=\"Decrement\">\r\n        <Button onClick = {Dec}  className = \"btn\" id = \"btnr\"> <DeleteForeverRoundedIcon /> </Button>\r\n        </Tooltip>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Inc_Dec;","import React, { useState } from 'react';\nimport './App.css';\nimport ToDoList from './ToDoLists'\nimport Inc_Dec from './Inc&Dec'\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nfunction App() {\n\n  //inputList hamara main hy jsmy hum apny input ka data pass kry hn or phr ya data hum items store kry hn...\n  const [inputList, setInputList] = useState(\"\")\n  \n  const [items, setItems] = useState([]);\n\n  const itemEvent = (event) => {\n    setInputList(event.target.value)\n  };\n\n  const listofItems = () => {\n    setItems((oldItems) => {\n      //oldItems is a empty array...\n      console.log(oldItems)\n      return [...oldItems, inputList]\n    })\n    setInputList(\"\")\n    \n  };\n\n    const deleteItems = (id) =>{\n      console.log(\"del\")\n      setItems((oldItems)=>{\n        return oldItems.filter((arrElement, index) => {\n          return index !== id;\n\n        })\n      })\n        \n    }\n\n  return (\n   <>\n  \n   <div className=\"App\">\n\n    <h1>ToDo List</h1>\n    <br />\n    <input type=\"text\" placeholder= \"Enter Items\" value = {inputList} onChange = {itemEvent} />\n    <Tooltip title=\"add\">\n    <button onClick = {listofItems}> + </button>\n    </Tooltip>\n    <ol>\n      {/* <li> {inputList} </li> */}\n    {/* map function k andr 4 chezn hoti hn 1. current value, 2. current value ka index number \n    3. kis array k sath deal kry hn hum wo, 4. this not useable */}\n   {items.map((itemValue, index) => {\n\n     return <ToDoList key = {index} \n     id = {index} \n     text = {itemValue} \n     set = {deleteItems} />\n     \n      })}\n\n    </ol>\n    \n    \n\n   </div>\n   \n   <Inc_Dec />\n\n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}